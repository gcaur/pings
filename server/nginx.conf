
#user  nobody;
worker_processes  4;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    gzip off;

    upstream myapp-site {
	 server 127.0.0.1:6544;
    	 server 127.0.0.1:6545;
    	 server 127.0.0.1:6546;
    	 server 127.0.0.1:6547;
    	 server 127.0.0.1:6548;
    	 server 127.0.0.1:6549;
    	 server 127.0.0.1:6550;
    	 server 127.0.0.1:6551; #down;
#maggie45
#         server 132.204.24.235:6544;
#         server 132.204.24.235:6545;
#         server 132.204.24.235:6546;
#         server 132.204.24.235:6547;
#         server 132.204.24.235:6548;
#         server 132.204.24.235:6549;
#         server 132.204.24.235:6550;
#         server 132.204.24.235:6551;
    }

    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

    location ~ (/|/get_pings|/submit_ping_results) {
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $scheme;

        client_max_body_size    10m;
        client_body_buffer_size 128k;
        proxy_connect_timeout   60s;
        proxy_send_timeout      90s;
        proxy_read_timeout      90s;
        proxy_buffering         off;
        proxy_temp_file_write_size 64k;
        proxy_pass http://myapp-site;
        proxy_redirect          off;

# The default seam to handle correctly when process are not available.
# If there is other problem, we can try those option bellow to be more reliable.
#        proxy_next_upstream     error timeout invalid_header http_500;
#        proxy_connect_timeout   2;
    }

#from http://serverfault.com/questions/140990/nginx-automatic-failover-load-balancing
#location / {
#        proxy_pass              http://lb;
#        proxy_redirect          off;
#        proxy_next_upstream     error timeout invalid_header http_500;
#        proxy_connect_timeout   2;
#        proxy_set_header        Host            $host;
#        proxy_set_header        X-Real-IP       $remote_addr;
#        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
#}
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
