Installation Guide
==================

This document will guide you in installing a local copy of the Pings server.
These instructions are geared towards setting up an environment for
development, so they use virtualenv to create an isolated environment for your
local Pings install. If you just want to run a copy of the server as simply as
possible, you could skip these steps if desired.

To follow this guide, you will need virtualenv and virtualenvwrapper (2.9 or
greater). On top of Python (obviously), you will need redis
installed. And finally you will also require the development packages for 
libevent and zeromq.

On Ubuntu or Debian, you can install all the above by running first:

``sudo apt-get install $(< ubuntu-requirements.txt)``

and second either ``sudo apt-get install virtualenvwrapper`` (if running
Ubuntu 12.04, Debian wheezy or more recent) or 
``sudo pip install virtualenvwrapper`` (if running an earlier version of Ubuntu
or Debian).

You need to source virtualenvwrapper : a simple way to do that is to add to
the end of your ~/.bashrc :
``
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/Devel
source /usr/local/bin/virtualenvwrapper.sh
``
Then close and reopen your terminal.

If the directories speficied by WORKON_HOME and PROJECT_HOME don't exist, create
them with ``mkdir $WORKON_HOME $PROJECT_HOME``.

If for some reason you can't locate virtualenvwrapper.sh it should be available
within the sources of virtualenvwrapper which you can download from:
http://pypi.python.org/pypi/virtualenvwrapper/

Once you have all the requirements above installed , the rest is pretty simple.

1. Create and activate a virtualenv project directory (an isolated Python
   installation) by running `mkproject pings`. You can check that the
   virtualenv was activated by running ``showvirtualenv``, which should ouput
   "pings". After executing the ``mkproject`` command, your current directory
   will be the project directory, and all Python packages installed through
   ``pip`` will be kept in a separate location from your system Python 
   packages.

2. Get a copy of the source code into the current directory by running
   ``git clone git://github.com/lisa-lab/pings.git .``.

3. Go to the "server" subdirectory of the Pings source code:
   ``cd server``.

4. To install all the Python dependencies for the Pings, run
   ``PYTHONPATH= pip install -r requirements.txt``. This takes a little while.

   If you have the error:

      ImportError: No module named numpy.distutils.core

   then run this command before re-running the previous command
   (This fix some order installation dependency):

       ``pip install numpy==1.6.2``

   The PYTHONPATH= is needed in case you modified it. We do not want
   it to mess with the installation.

5. Then run ``python setup.py develop`` to install (in-place) the Pings
   server code itself.

6. Run the script ``./download_geoip_db`` to download a copy of the free
   GeoIP database from MaxMind.

7. Download known ip that are pignable:
   * wget -c http://www-etud.iro.umontreal.ca/~boulanni/addresses.pickle.zip
   * unzip addresses.pickle.zip

8. Start the Pings servers. In separate windows, run:
   * ``./storage_server development.ini``
   * ``./leaderboards_server development.ini``
   * ``paster serve development.ini``

You should now have a Pings server running, listening on port 6543.

A few notes. The above assumes that the Redis server
installed are running. If this is not the case, start the missing ones (in
separate windows again) with ``redis-server``. If you have
the Screen program installed, you can also use the ``development.screenrc``
file instead, which starts all the above programs in
separate screen windows. Simply do ``screen -c development.screenrc`` to do
that.

A faster ipaddr python module:

git clone https://code.google.com/r/fredericbastien-ipaddr-py-speed-up/
cd fredericbastien-ipaddr-py-speed-up/trunk
pip install .


- set iptables rules AND enable them at start up
#sudo iptables -A INPUT -p tcp --dport 11211 -j ACCEPT -s IP
#sudo iptables -A INPUT -p tcp --dport 11211 -j ACCEPT -s LOCALHOSTIP
#sudo iptables -A INPUT -p tcp --dport 11211 -j REJECT

- Add the following line to /etc/crontab. This generate each 5 minutes a static copy of the leaderboard to help scale as nginx is faster to serve then regenerting it each time or event caching it and making pyramid serve it.
0,5,10,15,20,25,30,35,40,45,50,55 * * * * root cd /usr/share/nginx/www && wget iconnect2.iro.umontreal.ca:8080 -O leaderboard.html

=======
#List all current rules
sudo iptables -L

# Some Fedora version, to make permanent the current iptables do this:
[root@bigboy tmp]# iptables-save > /etc/sysconfig/iptables
